name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Dependencies
        run: |
          python -m venv venv
          venv/bin/python -m pip install --upgrade pip
          venv/bin/python -m pip install -r requirements.txt

      - name: Run Tests manually
        run: venv/bin/python tests.py  # Run tests without activating venv

  deploy:
    needs: build
    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Dependencies
        run: |
          python -m venv venv
          venv/bin/python -m pip install --upgrade pip
          venv/bin/python -m pip install -r requirements.txt

      - name: Install Platypus and Find CLI Tools
        run: |
          brew update
          brew install --cask platypus
          
          # Find where the Platypus CLI tools are located
          echo "Searching for Platypus CLI tools..."
          find /Applications/Platypus.app -type f -name "platypus*" | sort
          
          # Create a local bin directory and add to PATH
          mkdir -p $HOME/bin
          echo "$HOME/bin" >> $GITHUB_PATH
          
          # Check which version of Platypus app we have
          echo "Platypus app version:"
          defaults read /Applications/Platypus.app/Contents/Info CFBundleShortVersionString || echo "Could not read version"
          
      - name: Create Build Directory
        run: mkdir -p build
        
      - name: Set up Platypus CLI Manually
        run: |
          # Locate the Platypus executable within the app bundle
          PLATYPUS_EXE=$(find /Applications/Platypus.app -name "Platypus" -type f -path "*/Contents/MacOS/*" | head -n 1)
          echo "Found Platypus executable at: $PLATYPUS_EXE"
          
          # Create a wrapper script that calls the Platypus executable with the provided args
          echo '#!/bin/bash' > $HOME/bin/platypus
          echo "\"$PLATYPUS_EXE\" \"\$@\"" >> $HOME/bin/platypus
          chmod +x $HOME/bin/platypus
          
          # Verify our script
          echo "Script content:"
          cat $HOME/bin/platypus
          
          echo "Checking if our script is executable:"
          ls -la $HOME/bin/platypus
          
      - name: Build macOS Application
        run: |
          # Use our wrapper script
          $HOME/bin/platypus -P -y -a "Secure Password Manager" -o "None" -i "icon.icns" -f "python3" -B "main.py" "build/SecurePasswordManager.app"

      - name: Package as DMG
        run: |
          hdiutil create -volname "Secure Password Manager" -srcfolder "build/SecurePasswordManager.app" -ov -format UDZO "SecurePasswordManager.dmg"

      - name: Upload DMG to GitHub Releases
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          files: SecurePasswordManager.dmg
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v1.0.${{ github.run_number }}
          name: "Secure Password Manager v1.0.${{ github.run_number }}"
          body: "Automated release of Secure Password Manager"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}